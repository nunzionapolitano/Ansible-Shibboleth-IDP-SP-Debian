- name: Test if idpuser can query LDAP server
  shell: "ldapsearch -H ldap://{{ ldap_fqdn }} -D '{{ ldap_binddn }}' -w {{ idp_secret }}  -b '{{ ldap_basedn }}'"

- name: Generate salt for persistentId generator
  shell: openssl rand -base64 36
  register: persId_salt
  when: persId_salt is not defined

- name: "Ensures {{ idp_path }}/tmp dir exists"
  file: path="{{ idp_path }}/tmp" state=directory

- name: jetty user for idp dirs
  file: name="{{ item }}" owner="jetty" recurse=yes
  with_items:
    - "{{ idp_path }}/tmp"
    - "{{ idp_path }}/conf"
    - "{{ idp_path }}/logs"
    - "{{ idp_path }}/metadata"
    - "{{ idp_path }}/credentials"
  when: servlet_container == "jetty"

- name: tomcat user for idp dirs
  file: name="{{ item }}" owner="{{ tomcat_version }}" recurse=yes
  with_items:
    - "{{ idp_path }}/tmp"
    - "{{ idp_path }}/conf"
    - "{{ idp_path }}/logs"
    - "{{ idp_path }}/metadata"
    - "{{ idp_path }}/credentials"
  when: servlet_container == "tomcat"

- name: Install the IdP WAR
  template:
    src: roles/shib3idp_configure/templates/idp-jetty.xml
    dest: "{{ jetty_path }}/webapps/idp.xml"
  when: servlet_container == "jetty"

- name: Install the IdP WAR
  template:
    src: roles/shib3idp_configure/templates/idp-tomcat.xml
    dest: "/etc/{{ tomcat_version }}/Catalina/localhost/idp.xml"
  when: servlet_container == "tomcat"

- name: Copy certs
  copy:
    src: "{{ item }}"
    dest: "{{ idp_path}}/credentials/"
    owner: root
    group: ssl-cert
    mode: 644
  with_fileglob:
    - /etc/ssl/certs/{{ domain }}/{{ ldap_cert }}

- name: Configure LDAP Auth
  template:
    src: roles/shib3idp_configure/templates/ldap.properties
    dest: "{{ idp_path }}/conf/ldap.properties"
    backup: yes

# - name: Configure Enhanced Logging
  # copy:
    # src: roles/shib3idp_configure/files/logback.xml
    # dest: "{{ idp_path }}/conf/logback.xml"
    # backup: yes

- name: Add Enhanched logging on users Authentication
  blockinfile:
    path: "{{ idp_path }}/conf/logback.xml"
    insertbefore: '<!-- Logs LDAP related messages -->'
    marker: "<!-- Logs on LDAP user authentication - ADDED -->"
    block: |8
            <logger name="org.ldaptive.auth.Authenticator" level="INFO" />

# wget http://www.garr.it/idem-conf/attribute-resolver-v3-idem.xml -O /opt/shibboleth-idp/conf/attribute-resolver-v3-idem.xml
- name: Copy configured {{ idp_attr_resolver }} in attribute-resolver-v3-idem.xml
  copy:
    src: "roles/shib3idp_configure/files/{{ idp_attr_resolver }}"
    dest: "{{ idp_path }}/conf/{{ idp_attr_resolver }}"
    backup: yes

- name: Copy configured attribute-resolver-dynamic.xml
  copy:
    src: "roles/shib3idp_configure/files/attribute-resolver-dynamic.xml"
    dest: "{{ idp_path }}/conf/attribute-resolver-dynamic.xml"
    backup: yes

- name: Copy configured attribute-resolver-dbsql.xml
  copy:
    src: "roles/shib3idp_configure/files/attribute-resolver-dbsql.xml"
    dest: "{{ idp_path }}/conf/attribute-resolver-dbsql.xml"
    backup: yes

- name: Update services.xml
  blockinfile:
    path: "{{ idp_path }}/conf/services.xml"
    insertafter: '<value>%{idp.home}/conf/attribute-resolver.xml</value>'
    marker: "<!-- Attribute resolvers -->"
    block: |8
              <value>%{idp.home}/conf/{{ idp_attr_resolver }}</value>
              <value>%{idp.home}/conf/attribute-resolver-dynamic.xml</value>
              <value>%{idp.home}/conf/attribute-resolver-dbsql.xml</value>
    backup: yes

# these replace will be overwritten by next task if idp_persistent_id_rdbms == true
- replace:
    path: "{{ idp_path }}/conf/saml-nameid.properties"
    regexp: '#idp.persistentId.sourceAttribute = changethistosomethingreal'
    replace: 'idp.persistentId.sourceAttribute = uid'
    backup: yes
  when: idp_persistent_id_rdbms == false

- replace:
    path: "{{ idp_path }}/conf/saml-nameid.properties"
    regexp: '#idp.persistentId.salt = changethistosomethingrandom'
    replace: 'idp.persistentId.salt = {{ persId_salt.stdout }}'
  when: idp_persistent_id_rdbms == false

- name: "Run MariaDB role"
  include_role:
    name: "mariadb"

# DataStore
# the sourceAttribute MUST BE an attribute, or a list of comma-separated attributes, that uniquely identify the subject of the generated persistent-id. It MUST BE: Stable, Permanent and Not-reassignable
# - name: Configure saml-nameid.properties (dataStore and persistentId)
  # template:
    # src: roles/{{ role_name }}/templates/saml-nameid.properties
    # dest: "{{ idp_path }}/conf/saml-nameid.properties"
    # backup: yes

# - name: Configure saml-nameid.xml (persistentId)
  # copy:
    # src: roles/{{ role_name }}/files/saml-nameid.xml
    # dest:  "{{ idp_path }}/conf/saml-nameid.xml"
    # backup: yes

# - name: Configure relying-party.xml (persistentId)
  # template:
    # src: roles/{{ role_name }}/templates/relying-party.xml
    # dest:  "{{ idp_path }}/conf/relying-party.xml"
    # backup: yes


- name: Configure global.xml (dataStore and persistentId)
  template:
    src: roles/{{ role_name }}/templates/global.xml
    dest:  "{{ idp_path }}/conf/global.xml"
    backup: yes
# DataStore


- name: "Persistent ID Datastore (mariaDB)"
  import_tasks: persistent_id_datastore.yml
  when: idp_persistent_id_rdbms == true

- name: "Disable SAML1"
  import_tasks: disable_saml1.yml
  when: idp_disable_saml1 == true

# - name: Add metadata providers
  # template:
    # src: roles/shib3idp_configure/templates/metadata-providers.xml-no_sp
    # dest: "{{ idp_path }}/conf/metadata-providers.xml"
    # backup: yes

- replace:
    path: "{{ idp_path }}/metadata/idp-metadata.xml"
    regexp: ':8443'
    replace: ''
    backup: yes

# nuovi da 3.4.2 come guida Malavolti
- replace:
    path: "{{ idp_path }}/metadata/idp-metadata.xml"
    regexp: 'validUntil=["TZ0-9\.\-\:]+'
    replace: ''
    backup: no

# remove SAML1.0
- replace:
    path: "{{ idp_path }}/metadata/idp-metadata.xml"
    regexp: '<SingleSignOnService Binding="urn:mace:shibboleth:1.0:profiles:AuthnRequest" Location="https://{{ idp_fqdn }}/idp/profile/Shibboleth/SSO"/>'
    replace: "<NameIDFormat>urn:oasis:names:tc:SAML:2.0:nameid-format:transient</NameIDFormat>
              <NameIDFormat>urn:oasis:names:tc:SAML:2.0:nameid-format:persistent</NameIDFormat>"
    backup: no
# fine modifiche 3.4.2

# diff conf malavolti
# - replace:
    # path: "{{ idp_path }}/conf/c14n/subject-c14n.xml"
    # regexp: '<!-- <ref bean="c14n/SAML2Persistent" /> -->'
    # replace: '<ref bean="c14n/SAML2Persistent" />'

- replace:
    path: "{{ idp_path }}/conf/saml-nameid.xml"
    regexp: '<!--[\n\t\s]*<ref bean="shibboleth.SAML2PersistentGenerator" />[\n\t\s]*-->'
    replace: '<ref bean="shibboleth.SAML2PersistentGenerator" />'

# end diff corso shibidp

- name: "Configure idp.properties"
  import_tasks: properties.yml

- name: "Download Shibboleth IT messages"
  get_url: url={{ idp_localized_message_url }} dest="{{ idp_path }}/messages/messages_it.properties"

- name: "Configure eduGAIN federation"
  import_tasks: edugain_federation.yml
  when: edugain_federation == true

- name: Restart Jetty
  service: name="jetty" state=restarted enabled=True
  when: servlet_container == "jetty"

- name: Restart Tomcat
  service: name="{{ tomcat_version }}" state=restarted
  when: servlet_container == "tomcat"

- name: Update GIT repository with a branch of the configured Shib IdP
  shell: "cd {{ idp_path }} && git checkout -b configuration && git add -A && git commit -am 'Shibboleth IdP configured'"
